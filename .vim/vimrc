" - Vimrc -


call plug#begin()
  Plug 'preservim/nerdtree'
  Plug 'sheerun/vim-polyglot'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'rakr/vim-one'
  Plug 'voldikss/vim-floaterm'
call plug#end()

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" Auto reload file
set autoread
set updatetime=1
au CursorHold,CursorHoldI * checktime
au FocusGained,BufEnter * :checktime

" Syntax Highlighting
syntax on
filetype plugin on
filetype plugin indent on

set nocompatible " enter the current millenium
set number
set laststatus=2 " Status Bar
set backspace=indent,eol,start "Backspacing all the way 
set mouse=n

" Indenting
set expandtab
set autoindent
set smartindent

" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Use jj as escape key
inoremap jj <Esc>

" ----------------------- One --------------------------"
" Colors: Install Atom-one-dark for consistent terminal colors
colorscheme one
set background=dark
highlight Normal guibg=#1d1f22
set termguicolors


" ----------------------- Nerd Tree ------------------ "
" Mirror and toggle the NERDTree before showing it. This makes it the same on all tabs.
nnoremap <C-n> :NERDTreeMirror<CR>:NERDTreeToggle<CR>
" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif


" ---------------- python-syntax --------------------- "
let g:python_highlight_all = 1


" -------------------- FZF --------------------------- "
nmap <C-F> :FZF<CR>
nmap <C-P> :GFiles<CR>
nnoremap <C-g> :Rg<Cr>


" ---------- Float Term ------------------------------ "
nnoremap   <silent>   <F12>   :FloatermToggle<CR>
tnoremap   <silent>   <F12>   <C-\><C-n>:FloatermToggle<CR>


" ----------------- COC ------------------------------ "
" Use tab for trigger completion with characters ahead and navigate.
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

